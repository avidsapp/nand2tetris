class Snake {
  field LinkedList pixels;

  constructor Snake new(int x, int y) {
    var PixelNode pix;
    let pix = PixelNode.new(x, y);
    let pixels = LinkedList.new();
    do pixels.push(pix);
    return this;
  }

  method void dispose() {
    do pixels.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void moveDown(bool increase_size){
    var PixelNode last, new_pixel;
    let last = pixels.last();
    if( last.y() = 255){
      return;
    }
    let new_pixel = PixelNode.new(last.x(), last.y() + 1);
    do pixels.push(new_pixel);

    if( ~increase_size ){
      do pixels.shift();
    }
    return;
  }

  method void moveLeft(bool increase_size){
    var PixelNode last, new_pixel;
    let last = pixels.last();
    if( last.x() = 0){
      return;
    }
    let new_pixel = PixelNode.new(last.x() - 1, last.y());
    do pixels.push(new_pixel);

    if( ~increase_size ){
      do pixels.shift();
    }
    return;
  }

  method void moveRight(bool increase_size){
    var PixelNode last, new_pixel;
    let last = pixels.last();
    if( last.x() = 511 ){
      return;
    }
    let new_pixel = PixelNode.new(last.x() + 1, last.y());
    do pixels.push(new_pixel);

    if( ~increase_size ){
      do pixels.shift();
    }
    return;
  }

  method void moveUp(bool increase_size){
    var PixelNode last, new_pixel;
    let last = pixels.last();
    if( last.y() = 0){
      return;
    }
    let new_pixel = PixelNode.new(last.x(), last.y() + -1);
    do pixels.push(new_pixel);

    if( ~increase_size ){
      do pixels.shift();
    }
    return;
  }

  method PixelNode first(){
    return pixels.first();
  }

  method LinkedList pixels(){
    return pixels;
  }
}
